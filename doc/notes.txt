For Angular demo : https://next.plnkr.co/edit/zhKKBUDPEJG18LOn

1) Patterns for construction

 - constructor pattern:
   - using proto
   - using constructor keyword
   - using class keyword

   Use new keyword to instantiate classes

 - module pattern :
   - Good for a service, e.g database module to handle DB calls

 - factory pattern :
   - simplifies object cretion
   - creating different objects based on need
   - repo creation (user, tasks, project ...)

 - singleton pattern :
   - with node : it is using commonJS, there is caching of module : https://nodejs.org/api/modules.html#modules_caching
     - module.exports = funct()  <<-- see the (), then node caches it and it makes singleton, or exports = new func
   - with angular : all services are singleton, meaning that app.service('nameService', serviceFunc); will add 'new' before serviceFunc to exec it


2) Structurals design patterns

How objects are made up and relationships between them
Extend or Simplify functionnality

 - Decorator pattern
  - Add new feature to obj without to much intrusion
  - Task.prototype.save.call(this); // call original function and passes this context
  - UrgentTask.prototype = Object.create(Task.prototype); // do not assign = directly or if changes in Utask proto it will affect task proto
  - for Angular services : use app.decorator and return $delegate to return same service

 - Facade pattern
  - Do a wrapper/interface module which return {api}

 - Flyweight pattern
   - conserves memory by sharing portions of an object between objects
     - smaller mem footprint
     - only if large number of objects

3) Behavioral pattern :

concerned about the assignement of responsabilities between objs and how they communicate

 - Observer pattern :
   - One object focal point

 - Mediator :
   - controls communication between objects so neither obj has to be coupled to the others

 - Command :
    - Encapsulates the calling of a method as an object
  - decouples exec from implementation
  - supports undo operations
